randomDraw <- function(probability){
draw <- rbinom(1,1,probability)
ifelse(draw == 1, TRUE, FALSE)
}
randomDraw(0.5)
randomDraw(0.5)
randomDraw(0.5)
randomDraw(0.5)
randomDraw(0.5)
randomDraw(0.5)\
randomDraw(0.5)
inferState <- function(accessValue,stateValue){
ifelse(accessValue,stateValue,randomDraw(0.5))
}
inferState(TRUE,TRUE)
inferState(FALSE,TRUE)
inferState(FALSE,TRUE)
inferState(FALSE,TRUE)
inferState(FALSE,TRUE)
inferState(FALSE,TRUE)
getBelief <- function(state,access){
belief <- inferState(acccess, stateValue)
return(belief)
}
getBelief(TRUE, TRUE)
getBelief <- function(access,state){
ifelse(access,state,randomDraw(0.5))
}
getBelief(TRUE,TRUE)
getBelief <- function(access,state){
ifelse(access == TRUE,state,randomDraw(0.5))
}
getBelief(TRUE, TRUE)
getBelief(FALSE, TRUE)
getBelief(FALSE, TRUE)
getBelief(FALSE, TRUE)
getBelief(FALSE, TRUE)
getBelief(FALSE, TRUE)
getBelief(FALSE, TRUE)
access <- c(TRUE, TRUE, FALSE)
state <- c(TRUE, TRUE, TRUE)
getBelief(access, state)
getBelief(access, state)
getBelief(access, state)
getBelief(access, state)
getBelief(access, state)
access == TRUE
ifelse(access == TRUE,state,randomDraw(0.5))
ifelse(access,state,randomDraw(0.5))
getBelief <- function(access,state){
ifelse(access,state,randomDraw(0.5))
}
access <- c(TRUE, TRUE, FALSE)
state <- c(TRUE, TRUE, TRUE)
getBelief(access, state)
getBelief(access, state)
getBelief(access, state)
getBelief <- function(access,state){
allStates <- ifelse(access,state,randomDraw(0.5))
sum(allStates)
}
getBelief(access, state)
getBelief(access, state)
getBelief(access, state)
getBelief(access, state)
getBelief(access, state)
getBelief(access, state)
uncertainSpeaker <- function(state, access, alpha, utterances){
utterancesPrior <- getUniformPrior(utterances)
belief <- getBelief(access, actualState)
output <- rep(0, length(utterances))
for (word in c(1:length(utterances))) {
ll <- literalListener(utterances[[word]],states)
utility <- exp(alpha * log(ll[belief+1])) * utterancesPrior[word]
output[word] <- utility
}
if (sum(output) != 0){
return(output/sum(output))
} else {return(output)}
}
access <- c(TRUE, TRUE, FALSE)
actualState <- c(TRUE, TRUE, TRUE)
uncertainSpeaker(3, access, 1, utterances)
states <- c(0,1,2,3)
utterances <- list(
some <- function(){states > 0},
all <- function() {states == 3},
two <- function(){states == 2},
notall <- function(){states != 3}
)
names(utterances) <- c("some","all","two","notall")
utteranceNames <- c("some","all","two","notall")
getUniformPrior <- function(states){
probability <- 1/length(states)
prior <- rep(probability, length(states))
return(prior)
}
literalListener <- function(utterance, states){
statesPrior <- getUniformPrior(states)
posterior <- rep(0, length(states))
truthValue <- utterance()
posterior[which(truthValue == TRUE)] <- 1
posterior <- posterior * statesPrior
posterior/sum(posterior)
}
speaker <- function(state, alpha, utterances){
utterancesPrior <- getUniformPrior(utterances)
output <- rep(0, length(utterances))
for (word in c(1:length(utterances))) {
ll <- literalListener(utterances[[word]],states)
utility <- exp(alpha * log(ll[state+1])) * utterancesPrior[word]
output[word] <- utility
}
if (sum(output) != 0){
return(output/sum(output))
} else {return(output)}
}
alpha <- 1
uncertainSpeaker(actualState, access, alpha, utterances)
uncertainSpeaker(actualState, access, alpha, utterances)
uncertainSpeaker(actualState, access, alpha, utterances)
uncertainSpeaker(actualState, access, alpha, utterances)
uncertainSpeaker(actualState, access, alpha, utterances)
uncertainSpeaker(actualState, access, alpha, utterances)
uncertainSpeaker(actualState, access, alpha, utterances)
speaker(3, 1, utterances)
uncertainListener <- function(access, utterance, index){
output <- rep(0, length(states))
for (state in states){
print(state)
uttProb <- uncertainSpeaker(actualState, access, alpha, utterances)
print(uttProb)
output[state+1] <- uttProb[index]
}
return(output/sum(output))
}
uncertainListener(access, "some", 1)
pragmaticListener <- function(utterance, index){
output <- rep(0, length(states))
for (state in states){
uttProb <- speaker(state,alpha,utterances)
output[state+1] <- uttProb[index]
}
return(output/sum(output))
}
pragmaticListener("some", 1)
uncertainListener <- function(access, utterance, index){
output <- rep(0, length(states))
for (state in states){
uttProb <- uncertainSpeaker(actualState, access, alpha, utterances)
output[state+1] <- uttProb[index]
}
return(output/sum(output))
}
uncertainListener(access, "some", 1)
uncertainListener(access, "some", 1)
uncertainSpeaker <- function(actualState, access, alpha, utterances){
utterancesPrior <- getUniformPrior(utterances)
belief <- getBelief(access, actualState)
output <- rep(0, length(utterances))
for (word in c(1:length(utterances))) {
ll <- literalListener(utterances[[word]],states)
utility <- exp(alpha * log(ll[belief+1])) * utterancesPrior[word]
output[word] <- utility
}
if (sum(output) != 0){
return(output/sum(output))
} else {return(output)}
}
uncertainSpeaker(actualState, access, 1, utterances)
